import 'package:flutter/material.dart';

/// A custom animated icon that can toggle between two icons with animation.
/// Inspired by the todo list app's animated icons.
class CustomAnimatedIcon extends StatefulWidget {
  /// The color of the icon
  final Color? color;

  /// The size of the icon
  final double? size;

  /// The first icon to display
  final IconData firstIcon;

  /// The second icon to display when toggled
  final IconData secondIcon;

  /// The duration of the toggle animation
  final Duration? duration;

  /// Callback when the icon is tapped
  final VoidCallback? onTap;

  /// Whether the icon is already in its second state
  final bool hasTapped;

  const CustomAnimatedIcon({
    super.key,
    this.color,
    this.size,
    required this.firstIcon,
    required this.secondIcon,
    this.duration,
    this.onTap,
    this.hasTapped = false,
  });

  @override
  _CustomAnimatedIconState createState() => _CustomAnimatedIconState();
}

class _CustomAnimatedIconState extends State<CustomAnimatedIcon>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;
  late bool _hasTapped;

  @override
  void initState() {
    _controller = AnimationController(
      vsync: this,
      duration: widget.duration ?? const Duration(milliseconds: 300),
    );
    _animation = Tween(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(parent: _controller, curve: Curves.easeInOut));
    _hasTapped = widget.hasTapped;

    if (_hasTapped) {
      _controller.value = 1.0;
    }

    super.initState();
  }

  @override
  void didUpdateWidget(CustomAnimatedIcon oldWidget) {
    super.didUpdateWidget(oldWidget);

    // If the hasTapped property changed externally, update the animation
    if (widget.hasTapped != oldWidget.hasTapped) {
      _hasTapped = widget.hasTapped;
      if (_hasTapped) {
        _controller.forward();
      } else {
        _controller.reverse();
      }
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final IconThemeData iconTheme = IconTheme.of(context);
    final effectiveColor = widget.color ?? iconTheme.color;
    final effectiveSize = widget.size ?? iconTheme.size;

    return InkWell(
      child: AnimatedBuilder(
        animation: _animation,
        builder: (context, child) {
          return Transform.scale(
            scale:
                0.9 +
                (_animation.value * 0.2), // Scale effect during transition
            child: AnimatedIcon(
              Icon(
                _hasTapped ? widget.secondIcon : widget.firstIcon,
                color: effectiveColor,
                size: effectiveSize,
              ),
            ),
          );
        },
      ),
      onTap: () {
        if (widget.onTap != null) {
          widget.onTap!();
        }

        setState(() {
          _hasTapped = !_hasTapped;
          if (_hasTapped) {
            _controller.forward();
          } else {
            _controller.reverse();
          }
        });
      },
    );
  }
}

/// A version of CustomAnimatedIcon that morphs between two different icons
class CustomMorphIcon extends StatefulWidget {
  /// The color of the icon
  final Color? color;

  /// The size of the icon
  final double? size;

  /// The first icon to display
  final AnimatedIconData icon;

  /// The duration of the toggle animation
  final Duration? duration;

  /// Callback when the icon is tapped
  final VoidCallback? onTap;

  /// Whether the icon is already in its second state
  final bool isToggled;

  const CustomMorphIcon({
    super.key,
    this.color,
    this.size,
    required this.icon,
    this.duration,
    this.onTap,
    this.isToggled = false,
  });

  @override
  _CustomMorphIconState createState() => _CustomMorphIconState();
}

class _CustomMorphIconState extends State<CustomMorphIcon>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late bool _isToggled;

  @override
  void initState() {
    _controller = AnimationController(
      vsync: this,
      duration: widget.duration ?? const Duration(milliseconds: 300),
      value: widget.isToggled ? 1.0 : 0.0,
    );
    _isToggled = widget.isToggled;
    super.initState();
  }

  @override
  void didUpdateWidget(CustomMorphIcon oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.isToggled != oldWidget.isToggled) {
      _isToggled = widget.isToggled;
      if (_isToggled) {
        _controller.forward();
      } else {
        _controller.reverse();
      }
    }
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final IconThemeData iconTheme = IconTheme.of(context);
    final effectiveColor = widget.color ?? iconTheme.color;
    final effectiveSize = widget.size ?? iconTheme.size;

    return InkWell(
      borderRadius: BorderRadius.circular(effectiveSize ?? 24),
      onTap: () {
        if (widget.onTap != null) {
          widget.onTap!();
        }

        setState(() {
          _isToggled = !_isToggled;
          if (_isToggled) {
            _controller.forward();
          } else {
            _controller.reverse();
          }
        });
      },
      child: Padding(
        padding: const EdgeInsets.all(8.0),
        child: AnimatedIcon(
          icon: widget.icon,
          progress: _controller,
          color: effectiveColor,
          size: effectiveSize,
        ),
      ),
    );
  }
}
